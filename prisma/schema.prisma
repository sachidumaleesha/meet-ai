generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  agents        Agent[]
  Meeting       Meeting[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Agent {
  id           String    @id @default(nanoid())
  name         String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  instructions String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Meeting      Meeting[]
}

enum MeetingStatus {
  UPCOMING
  ACTIVE
  COMPLETED
  PROCESSING
  CANCELLED
}

model Meeting {
  id            String        @id @default(nanoid())
  name          String
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  agentId       String
  agent         Agent         @relation(fields: [agentId], references: [id], onDelete: Cascade)
  status        MeetingStatus @default(UPCOMING)
  startedAt     DateTime?
  endedAt       DateTime?
  transcriptUrl String?
  recordingUrl  String?
  summary       String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}
